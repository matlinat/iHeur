CREATE OR REPLACE FUNCTION store_address_test1(
    p_city text,
    p_street text,
    p_housenumber text,
    p_postalcode text,
    p_country text
)
RETURNS VOID $$

DECLARE
    geoapify_url text;
    response_text text;
    response_json jsonb;
    rlon double precision;
    rlat double precision;
    
BEGIN
    -- Erstellen Sie die Geoapify-API-Anfrage-URL
    geoapify_url := 'https://api.geoapify.com/v1/geocode/search?limit=1&format=json&';
    geoapify_url := geoapify_url || 'city=' || p_city || '&';
    geoapify_url := geoapify_url || 'street=' || p_street || '&';
    geoapify_url := geoapify_url || 'housenumber=' || p_housenumber || '&';
    geoapify_url := geoapify_url || 'postcode=' || p_postalcode || '&';
    geoapify_url := geoapify_url || 'country=' || p_country || '&';
    geoapify_url := geoapify_url || '&apiKey=a2b10ef3af234cc098475a41b69cb026'; 

    -- Führen Sie die HTTP-Anfrage mit der http-Extension durch
    SELECT http_get(geoapify_url)::text INTO response_text;

    -- Ausgabe der Geoapify-Antwort in der SQL-Konsole
    RAISE NOTICE 'Geoapify Response: %', response_text;

     -- Parse JSON response
    response_json := response_text::jsonb;

    -- Extrahieren Sie Lon/Lat-Daten aus der Geoapify-Antwort
   SELECT
        (temp_response->'features'->0->'geometry'->'coordinates'->>0)::double precision AS rlon,
        (temp_response->'features'->0->'geometry'->'coordinates'->>1)::double precision AS rlat
    INTO rlon, rlat
    FROM jsonb_array_elements(response_json->'features') AS temp_response;


    -- Fügen Sie die Lon/Lat-Daten in die Tabelle ein
   UPDATE address
    SET
        city = p_city,
        street = p_street,
        housenumber = p_housenumber,
        postcode = p_postalcode,
        country = p_country,
        long = rlon,
        lat = rlat,
        location = ST_SetSRID(ST_MakePoint(rlon, rlat), 4326)
    WHERE
        owner_id = '2e66799c-7144-424d-87ce-fe9466eacadd';

END;
